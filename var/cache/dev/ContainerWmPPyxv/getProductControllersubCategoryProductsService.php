<?php

namespace ContainerWmPPyxv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getProductControllersubCategoryProductsService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.HrtDF.L.App\Controller\ProductController::subCategoryProducts()' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.HrtDF.L.App\\Controller\\ProductController::subCategoryProducts()'] = (new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'subCategoryRepository' => ['privates', 'App\\Repository\\SubCategoryRepository', 'getSubCategoryRepositoryService', true],
            'productRepository' => ['privates', 'App\\Repository\\ProductRepository', 'getProductRepositoryService', true],
            'marqueRepository' => ['privates', 'App\\Repository\\MarqueRepository', 'getMarqueRepositoryService', true],
            'modeleRepository' => ['privates', 'App\\Repository\\ModeleRepository', 'getModeleRepositoryService', true],
            'motorisationRepository' => ['privates', 'App\\Repository\\MotorisationRepository', 'getMotorisationRepositoryService', true],
            'paginator' => ['services', 'knp_paginator', 'getKnpPaginatorService', true],
            'categoryRepository' => ['privates', 'App\\Repository\\CategoryRepository', 'getCategoryRepositoryService', true],
        ], [
            'subCategoryRepository' => 'App\\Repository\\SubCategoryRepository',
            'productRepository' => 'App\\Repository\\ProductRepository',
            'marqueRepository' => 'App\\Repository\\MarqueRepository',
            'modeleRepository' => 'App\\Repository\\ModeleRepository',
            'motorisationRepository' => 'App\\Repository\\MotorisationRepository',
            'paginator' => '?',
            'categoryRepository' => 'App\\Repository\\CategoryRepository',
        ]))->withContext('App\\Controller\\ProductController::subCategoryProducts()', $container);
    }
}
